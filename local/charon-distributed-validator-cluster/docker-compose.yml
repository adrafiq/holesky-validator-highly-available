version: "3.8"

x-node-base:
  # Pegged charon version (update this for each release).
  &node-base
  image: obolnetwork/charon:${CHARON_VERSION:-v1.0.0}
  restart: unless-stopped
  networks: [ cluster ]
  depends_on: [ relay ]
  volumes:
    - ./.charon:/opt/charon/.charon/

x-node-env:
  &node-env
  CHARON_BEACON_NODE_ENDPOINTS: ${CHARON_BEACON_NODE_ENDPOINTS:-http://lighthouse:5052}
  CHARON_LOG_LEVEL: ${CHARON_LOG_LEVEL:-debug}
  CHARON_LOG_FORMAT: ${CHARON_LOG_FORMAT:-console}
  CHARON_P2P_EXTERNAL_HOSTNAME: ${CHARON_P2P_EXTERNAL_HOSTNAME:-} # Empty default required to avoid warnings.
  CHARON_P2P_RELAYS: ${CHARON_P2P_RELAYS:-http://relay:3640/enr}
  CHARON_P2P_TCP_ADDRESS: ${CHARON_P2P_TCP_ADDRESS:-0.0.0.0:3610}
  CHARON_VALIDATOR_API_ADDRESS: ${CHARON_VALIDATOR_API_ADDRESS:-0.0.0.0:3600}
  CHARON_MONITORING_ADDRESS: ${CHARON_MONITORING_ADDRESS:-0.0.0.0:3620}
  CHARON_JAEGER_ADDRESS: ${CHARON_JAEGER_ADDRESS-jaeger:6831} # Overriding to empty address allowed

services:


  geth:
    image: ethereum/client-go:v1.14.8
    volumes:
      - geth-data:/root/.ethereum
      - ./jwt/jwt.hex:/root/.ethereum/jwt.hex:ro
    ports:
      - "30303:30303"
      - "30303:30303/udp"
      - "8545:8545"
      - "8551:8551"
    networks: [ cluster ]
    command:
      - --holesky
      - --http
      - --http.addr=0.0.0.0
      - --http.vhosts=*
      - --http.api=eth,net,engine,admin
      - --authrpc.addr=0.0.0.0
      - --authrpc.port=8551
      - --authrpc.vhosts=*
      - --authrpc.jwtsecret=/root/.ethereum/jwt.hex
      - --syncmode=snap
      - --networkid=17000
    restart: unless-stopped

  #  _ _       _     _   _
  # | (_) __ _| |__ | |_| |__   ___  _   _ ___  ___
  # | | |/ _` | '_ \| __| '_ \ / _ \| | | / __|/ _ \
  # | | | (_| | | | | |_| | | | (_) | |_| \__ \  __/
  # |_|_|\__, |_| |_|\__|_| |_|\___/ \__,_|___/\___|
  #      |___/

  lighthouse:
    image: sigp/lighthouse:${LIGHTHOUSE_VERSION:-v5.3.0}
    ports:
      - ${LIGHTHOUSE_PORT_P2P:-9000}:9000/tcp # P2P TCP
      - ${LIGHTHOUSE_PORT_P2P:-9000}:9000/udp # P2P UDP
      - ${LIGHTHOUSE_PORT_HTTP:-5052}:5052    # HTTP API
      - ${LIGHTHOUSE_PORT_METRICS:-5054}:5054 # Metrics
    command:
      - lighthouse 
      - beacon_node
      - --network=${ETH2_NETWORK:-holesky}
      - --checkpoint-sync-url=https://checkpoint-sync.holesky.ethpandaops.io/
      - --execution-endpoint=${LIGHTHOUSE_EXECUTION_ENDPOINT:-http://geth:8551}
      - --execution-jwt=/opt/jwt/jwt.hex
      - --datadir=/opt/app/beacon/
      - --debug-level=info
      - --http
      - --http-address=0.0.0.0
      - --http-port=5052
      - --metrics
      - --metrics-address=0.0.0.0
      - --metrics-port=5054
      - --metrics-allow-origin=*
    networks: [ cluster ]
    volumes:
      - ./data/lighthouse:/opt/app/beacon
      - ./jwt:/opt/jwt
    restart: unless-stopped


  #       _                                  _ _            _
  #   ___| |__   __ _ _ __ ___  _ __     ___| (_) ___ _ __ | |_ ___
  #  / __| '_ \ / _` | '__/ _ \| '_ \   / __| | |/ _ \ '_ \| __/ __|
  # | (__| | | | (_| | | | (_) | | | | | (__| | |  __/ | | | |_\__ \
  #  \___|_| |_|\__,_|_|  \___/|_| |_|  \___|_|_|\___|_| |_|\__|___/
  node0:
    <<: *node-base
    environment:
      <<: *node-env
      CHARON_PRIVATE_KEY_FILE: /opt/charon/.charon/cluster/node0/charon-enr-private-key
      CHARON_LOCK_FILE: /opt/charon/.charon/cluster/node0/cluster-lock.json
      CHARON_JAEGER_SERVICE: node0
      CHARON_P2P_EXTERNAL_HOSTNAME: node0

  node1:
    <<: *node-base
    environment:
      <<: *node-env
      CHARON_PRIVATE_KEY_FILE: /opt/charon/.charon/cluster/node1/charon-enr-private-key
      CHARON_LOCK_FILE: /opt/charon/.charon/cluster/node1/cluster-lock.json
      CHARON_JAEGER_SERVICE: node1
      CHARON_P2P_EXTERNAL_HOSTNAME: node1

  node2:
    <<: *node-base
    environment:
      <<: *node-env
      CHARON_PRIVATE_KEY_FILE: /opt/charon/.charon/cluster/node2/charon-enr-private-key
      CHARON_LOCK_FILE: /opt/charon/.charon/cluster/node2/cluster-lock.json
      CHARON_JAEGER_SERVICE: node2
      CHARON_P2P_EXTERNAL_HOSTNAME: node2


  relay:
    <<: *node-base
    command: relay
    depends_on: []
    environment:
      <<: *node-env
      CHARON_HTTP_ADDRESS: 0.0.0.0:3640
      CHARON_DATA_DIR: /opt/charon/relay
      CHARON_P2P_RELAYS: ""
      CHARON_P2P_EXTERNAL_HOSTNAME: relay
    volumes:
      - ./relay:/opt/charon/relay:rw

  #             _ _     _       _
  # __   ____ _| (_) __| | __ _| |_ ___  _ __ ___
  # \ \ / / _` | | |/ _` |/ _` | __/ _ \| '__/ __|
  #  \ V / (_| | | | (_| | (_| | || (_) | |  \__ \
  #   \_/ \__,_|_|_|\__,_|\__,_|\__\___/|_|  |___/
  vc0-lighthouse:
    image: sigp/lighthouse:${LIGHTHOUSE_VERSION:-v5.1.0}
    entrypoint: /opt/lighthouse/run.sh
    networks: [ cluster ]
    depends_on: [ node0 ]
    restart: unless-stopped
    environment:
      LIGHTHOUSE_BEACON_NODE_ADDRESS: http://node0:3600
      ETH2_NETWORK: ${ETH2_NETWORK:-holesky}
    volumes:
      - ./lighthouse/run.sh:/opt/lighthouse/run.sh
      - .charon/cluster/node0/validator_keys:/opt/charon/keys

  vc1-teku:
    image: consensys/teku:${TEKU_VERSION:-24.2.0}
    networks: [ cluster ]
    depends_on: [ node1 ]
    restart: unless-stopped
    command: |
      validator-client
      --beacon-node-api-endpoint="http://node1:3600"
      --config-file "/opt/charon/teku/teku-config.yaml"
      --Xblock-v3-enabled=false
    volumes:
      - .charon/cluster/node1/validator_keys:/opt/charon/validator_keys
      - ./teku:/opt/charon/teku

  vc2-nimbus:
    build: nimbus
    networks: [ cluster ]
    depends_on: [ node2 ]
    restart: unless-stopped
    environment:
      NODE: node2
    volumes:
      - .charon/cluster/node2/validator_keys:/home/validator_keys
      - ./nimbus:/home/user/data

  #                        _ _             _
  #  _ __ ___   ___  _ __ (_) |_ ___  _ __(_)_ __   __ _
  # | '_ ` _ \ / _ \| '_ \| | __/ _ \| '__| | '_ \ / _` |
  # | | | | | | (_) | | | | | || (_) | |  | | | | | (_| |
  # |_| |_| |_|\___/|_| |_|_|\__\___/|_|  |_|_| |_|\__, |
  #                                                |___/
  prometheus:
    image: prom/prometheus:${PROMETHEUS_VERSION:-v2.50.1}
    ports:
      - "9090:9090"
    networks: [ cluster ]
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana:${GRAFANA_VERSION:-10.3.3}
    ports:
      - "3000:3000"
    networks: [ cluster ]
    depends_on: [ prometheus ]
    volumes:
      - ./grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
      - ./grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/datasource.yml
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini:ro
      - ./grafana/dashboards:/etc/dashboards

  node-exporter:
    image: prom/node-exporter:${NODE_EXPORTER_VERSION:-v1.7.0}
    ports:
      - "9100:9100"
    networks: [ cluster ]

  jaeger:
    image: jaegertracing/all-in-one:${JAEGAR_VERSION:-1.55.0}
    networks: [ cluster ]
    ports:
      - "16686:16686"

volumes:
  geth-data:

networks:
  cluster:
