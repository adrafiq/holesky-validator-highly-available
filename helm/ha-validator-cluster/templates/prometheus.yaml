---
# Prometheus Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:{{ .Values.monitoring.prometheus.version }}
        args:
          - "--config.file=/etc/prometheus/prometheus.yml"
          - "--storage.tsdb.path=/prometheus"
          - "--web.console.libraries=/usr/share/prometheus/console_libraries"
          - "--web.console.templates=/usr/share/prometheus/consoles"
        ports:
        - containerPort: 9090
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus/prometheus.yml
          subPath: prometheus.yml
        - name: prometheus-storage
          mountPath: /prometheus
      volumes:
      - name: prometheus-config
        configMap:
          name: {{ .Release.Name }}-prometheus-config
      - name: prometheus-storage
        emptyDir: {}  # Consider using a PersistentVolume for production

---
# Prometheus ConfigMap (using values)
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-prometheus-config
data:
  prometheus.yml: |
    {{- toYaml .Values.monitoring.prometheus.config | nindent 4 }}

---
# Prometheus Service
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-prometheus
spec:
  selector:
    app: prometheus
  ports:
    - port: 9090
      targetPort: 9090

---
# Optional: PersistentVolumeClaim for Prometheus data (uncomment for production use)
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: {{ .Release.Name }}-prometheus-storage
# spec:
#   accessModes:
#     - ReadWriteOnce
#   resources:
#     requests:
#       storage: 10Gi  # Adjust size as needed